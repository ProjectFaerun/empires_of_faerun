###########################################
#                                         #
# seros Status, Policy & News Events	  #
#                                         #
# ID SE.50000-SE.51000    	              #
#                                         #
###########################################

namespace = SE

# Written by: 
# Henrik Fåhraeus
# Alexander Oltner

# New seros Emperor. Pick a new Policy and send a News Event!
# Hidden. Fired from on_offmap_ruler_changed.
character_event = {
	id = SE.50000
	offmap = only

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes

	trigger = { is_offmap_tag = seros }
    
	immediate = {
		FROMFROM = {
			set_offmap_flag = no_policy_news # Don't fire the News event in 'on_offmap_policy_changed'
			random_list = {
				100 = { # OPEN
					modifier = {
						factor = 1.5
						has_status = seros_stable
					}
					modifier = {
						factor = 5
						has_policy = seros_open
						NOT = { days_since_policy_change = 10950 } #30 years
					}
					set_policy = seros_open
					log = "-------------------------------------"
					log = "seros Policy Logging:"
					log = "seross new Policy is now OPEN"
					log = "-------------------------------------"
				}
				20 = { # ISOLATIONIST
					trigger = {
						OR = {
							NOT = { has_offmap_tmp_flag = seros_forced_open }
							had_offmap_tmp_flag = { flag = seros_forced_open years = 50 }
						}
					}
					modifier = {
						factor = 10
						has_offmap_flag = seros_isolationist_trend
					}
					modifier = { # Hard times... (negative Status)
						factor = 2
						seros_is_suffering_trigger = yes
					}
					modifier = {
						factor = 0.5
						has_status = seros_golden_age
					}
					modifier = {
						factor = 5
						has_policy = seros_isolationist
						NOT = { days_since_policy_change = 10950 } #30 years
					}
					set_policy = seros_isolationist
					log = "-------------------------------------"
					log = "seros Policy Logging:"
					log = "seross new Policy is now ISOLATIONIST"
					log = "-------------------------------------"
					clr_offmap_flag = seros_isolationist_trend
					clr_offmap_tmp_flag = seros_forced_open
				}
				10 = { # EXPANSIONIST
					trigger = {
						NOT = { has_offmap_flag = seros_badly_beaten_3 }
						NOT = { check_variable = { which = "global_seros_change_to_expansionist_count" value = 6 } }
					}
					modifier = {
						factor = 20
						has_offmap_flag = seros_expansionist_trend
					}
					modifier = {
						factor = 2
						has_status = seros_golden_age
					}
					modifier = {
						factor = 0.75
						has_offmap_flag = seros_badly_beaten_1
					}
					modifier = {
						factor = 0.5
						has_offmap_flag = seros_badly_beaten_2
					}
					modifier = {
						factor = 10
						has_policy = seros_expansionist
						NOT = { days_since_policy_change = 14600 } #40 years
					}
					modifier = {
						factor = 0.1
						has_policy = seros_expansionist
						days_since_policy_change = 32850 #90 years
					}
					modifier = {
						factor = 0.2
						check_variable = { which = "global_seros_change_to_expansionist_count" value = 3 }
					}
					if = {
						limit = { NOT = { has_policy = seros_expansionist } }
						change_variable = { which = "global_seros_change_to_expansionist_count" value = 1 }
					}
					set_policy = seros_expansionist
					log = "-------------------------------------"
					log = "seros Policy Logging:"
					log = "seross new Policy is now EXPANSIONIST"
					log = "-------------------------------------"
					clr_offmap_flag = seros_expansionist_trend
				}
			}
		}
		
		if = {
			limit = { FROMFROM = { NOT = { has_offmap_flag = no_succession_news } } }
			any_player = {
				limit = {
					has_offmap_news_enabled = FROMFROM
					is_within_diplo_range = ROOT
				}
				narrative_event = { id = SE.50001 }
			}
		}
		
		FROMFROM = {
			clr_offmap_flag = no_policy_news
			clr_offmap_flag = no_succession_news
		}
	}
}

# News from seros: A new Emperor
narrative_event = {
 	id = SE.50001
	title = NEWS_FROM_seros
	picture = GFX_evt_china_golden_age
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	desc = {
		trigger = {
			FROM = {
				OR = {
					AND = {
						prev_policy = seros_open
						has_policy = seros_open
					}
					AND = {
						prev_policy = seros_isolationist
						has_policy = seros_isolationist
					}
					AND = {
						prev_policy = seros_expansionist
						has_policy = seros_expansionist
					}
				}
				FROM = {
					dynasty = PREV
				}
			}
		}
		text = EVTDESC_SE_50001
	}
	desc = {
		trigger = {
			FROM = {
				OR = {
					AND = {
						prev_policy = seros_open
						has_policy = seros_open
					}
					AND = {
						prev_policy = seros_isolationist
						has_policy = seros_isolationist
					}
					AND = {
						prev_policy = seros_expansionist
						has_policy = seros_expansionist
					}
				}
				FROM = {
					NOT  = { dynasty = PREV }
				}
			}
		}
		text = EVTDESC_SE_50001_NEW_DYN
	}
	desc = {
		trigger = {
			FROM = {
				OR = {
					AND = {
						prev_policy = seros_open
						NOT = { has_policy = seros_open }
					}
					AND = {
						prev_policy = seros_isolationist
						NOT = { has_policy = seros_isolationist }
					}
					AND = {
						prev_policy = seros_expansionist
						NOT = { has_policy = seros_expansionist }
					}
				}
				FROM = {
					dynasty = PREV
				}
			}
		}
		text = EVTDESC_SE_50001_NEW_POLICY
	}
	desc = {
		trigger = {
			FROM = {
				OR = {
					AND = {
						prev_policy = seros_open
						NOT = { has_policy = seros_open }
					}
					AND = {
						prev_policy = seros_isolationist
						NOT = { has_policy = seros_isolationist }
					}
					AND = {
						prev_policy = seros_expansionist
						NOT = { has_policy = seros_expansionist }
					}
				}
				FROM = {
					NOT  = { dynasty = PREV }
				}
			}
		}
		text = EVTDESC_SE_50001_NEW_DYN_NEW_POLICY
	}

	has_dlc = "Jade Dragon"
	
    is_triggered_only = yes
	
	option = {
		name = EVTOPT_SE_50001_OPEN
		trigger = {
			FROM = { has_policy = seros_open }
			OR = {
				NOT = { has_character_modifier = peace_deal_with_seros }
				FROM = { FROM = { dynasty = PREV } }
			}
		}
		if = {
			limit = { has_character_flag = was_tributary_of_seros }
			tooltip = {
				FROM = {
					show_scope_change = no
					governor = {
						ROOT = { remove_tributary = PREV }
					}
				}
			}
			clr_character_flag = was_tributary_of_seros
		}
	}
	option = {
		name = EVTOPT_SE_50001_ISO
		trigger = {
			FROM = { has_policy = seros_isolationist }
			OR = {
				NOT = { has_character_modifier = peace_deal_with_seros }
				FROM = { FROM = { dynasty = PREV } }
			}
		}
		if = {
			limit = { has_character_flag = was_tributary_of_seros }
			tooltip = {
				FROM = {
					show_scope_change = no
					governor = {
						ROOT = { remove_tributary = PREV }
					}
				}
			}
			clr_character_flag = was_tributary_of_seros
		}
	}
	option = {
		name = EVTOPT_SE_50001_EXP
		trigger = {
			FROM = { has_policy = seros_expansionist }
			OR = {
				NOT = { has_character_modifier = peace_deal_with_seros }
				FROM = { FROM = { dynasty = PREV } }
			}
		}
		if = {
			limit = { has_character_flag = was_tributary_of_seros }
			tooltip = {
				FROM = {
					show_scope_change = no
					governor = {
						ROOT = { remove_tributary = PREV }
					}
				}
			}
			clr_character_flag = was_tributary_of_seros
		}
	}
	
	option = {
		name = EVTOPT_SE_50302_BROKEN_PEACE_DEAL
		trigger = {
			has_character_modifier = peace_deal_with_seros
			FROM = { FROM = { NOT  = { dynasty = PREV } } }
		}
		if = {
			limit = { has_character_flag = was_tributary_of_seros }
			tooltip = {
				FROM = {
					show_scope_change = no
					governor = {
						ROOT = { remove_tributary = PREV }
					}
				}
			}
			clr_character_flag = was_tributary_of_seros
		}
		remove_character_modifier = peace_deal_with_seros
	}
}

# New Policy Picked.
# Hidden. Fired from on_offmap_policy_changed.
# Root = Governor
# From = Offmap
character_event = {
    id = SE.50020

    has_dlc = "Jade Dragon"

    is_triggered_only = yes
    hide_window = yes
	
	trigger = {
		FROM = {
			NOT = { has_offmap_flag = no_policy_news }
			is_offmap_tag = seros
		}
	}
    
    immediate = {
		any_player = {
			limit = {
				has_offmap_news_enabled = FROM
				is_within_diplo_range = ROOT
			}
			narrative_event = { id = SE.50021 }
		}
	}
}

# News from seros: New Policy Picked
narrative_event = {
	id = SE.50021
	title = NEWS_FROM_seros
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china
	
	desc = {
		trigger = { FROMFROM = { has_policy = seros_open } }
		picture = GFX_evt_seros_open
		text = EVTDESC_SE_50021_OPEN
	}
	desc = {
		trigger = { FROMFROM = { has_policy = seros_isolationist } }
		picture = GFX_evt_seros_isolationist
		text = EVTDESC_SE_50021_ISO
	}
	desc = {
		trigger = { FROMFROM = { has_policy = seros_expansionist } }
		picture = GFX_evt_seros_expansionist
		text = EVTDESC_SE_50021_EXP
	}

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	
	option = {
		name = EVTOPT_SE_50001_OPEN
		trigger = { FROMFROM = { has_policy = seros_open } }
	}
	option = {
		name = EVTOPT_SE_50021_ISO
		trigger = { FROMFROM = { has_policy = seros_isolationist } }
	}
	option = {
		name = EVTOPT_SE_50001_EXP
		trigger = { FROMFROM = { has_policy = seros_expansionist } }
	}
}


# New seros Status
# Hidden. Fired from on_offmap_status_changed.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50030

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes

	trigger = { FROM = { is_offmap_tag = seros } }
    
	immediate = {
		FROM = {
			clr_offmap_flag = seros_merrow_invasion
			clr_offmap_flag = seros_sahuagin_invasion
		}
		
		if = {
			limit = {
				FROM = {
					NOT = { has_offmap_flag = no_status_news }
				}
			}
			any_player = {
				limit = {
					has_offmap_news_enabled = FROM
					is_within_diplo_range = ROOT
				}
				narrative_event = { id = SE.50031 }
			}
		}
	}
}

# News from seros: New Status
narrative_event = {
	id = SE.50031
	title = NEWS_FROM_seros
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china
	
	desc = {
		trigger = { FROMFROM = { has_status = seros_stable } }
		picture = GFX_evt_china_stable
		text = EVTDESC_SE_50031_STABLE
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_unrest } }
		picture = GFX_evt_china_unrest
		text = EVTDESC_SE_50031_UNREST
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_famine } }
		picture = GFX_evt_china_famine
		text = EVTDESC_SE_50031_FAMINE
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_plague } }
		picture = GFX_evt_china_devastating_plague
		text = EVTDESC_SE_50031_PLAGUE
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_merrow_invasion } }
		picture = GFX_evt_china_mongols_invade
		text = EVTDESC_SE_50031_sahuagin
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_sahuagin_invasion } }
		picture = GFX_evt_china_mongols_invade
		text = EVTDESC_SE_50031_tuigan
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_civil_war } }
		picture = GFX_evt_china_civil_war
		text = EVTDESC_SE_50031_CW
	}
	desc = {
		trigger = { FROMFROM = { has_status = seros_golden_age } }
		picture = GFX_evt_china_golden_age
		text = EVTDESC_SE_50031_GOLDEN
	}

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	
	option = {
		name = INTERESTING
	}
}

# Status returns to 'Stable'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50100

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_stable
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # Unrest last for at least 2 years before becoming Stable/Civil War
			factor = 0
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_unrest years = 2 }
				}
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 8 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 10 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 12 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 14 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 16 }
			}
		}
		modifier = { # Famines last for at least 4 years
			factor = 0
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_famine years = 4 }
				}
			}
		}
		modifier = { # Plagues last for at least 2 years
			factor = 0
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_plague years = 2 }
				}
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 6 }
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 3 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 8 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 5 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 10 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 7 }
			}
		}
		modifier = { # Golden ages last at least 50 years
			factor = 0
			FROM = {
				has_status = seros_golden_age
				has_offmap_flag = seros_had_golden_age
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_golden_age years = 50 }
				}
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_golden_age
				has_offmap_flag = seros_had_golden_age
				had_offmap_tmp_flag = { flag = seros_had_golden_age years = 60 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_golden_age
				has_offmap_flag = seros_had_golden_age
				had_offmap_tmp_flag = { flag = seros_had_golden_age years = 70 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_golden_age
				has_offmap_flag = seros_had_golden_age
				had_offmap_tmp_flag = { flag = seros_had_golden_age years = 80 }
			}
		}
	}
    
	immediate = {
		FROM = {
			set_status = seros_stable # Players will be notified by SE.50030
		}
	}
}

# Status changes to 'Unrest'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50120

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_unrest
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
		}
	}
    
	weight_multiplier = {
		factor = 1
		modifier = { # Slightly less likely to get unrest if things are fine
			factor = 0.75
			FROM = {
				has_status = seros_stable
			}
		}
		modifier = { # Golden ages are very unlikely to end with Unrest
			factor = 0.01
			FROM = { has_status = seros_golden_age }
		}
		modifier = { # Famines last for at least 4 years
			factor = 0
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_famine years = 4 }
				}
			}
		}
		modifier = { # Plagues last for at least 2 years
			factor = 0
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_plague years = 2 }
				}
			}
		}
		modifier = { # Slightly more likely to get Unrest if non-seros emperor
			factor = 1.25
			FROM = {
				NOR = {
					culture = sea_elf
					culture = merrow
					culture_group = fish_group
				}
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 6 }
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 3 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 8 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 5 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 10 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 7 }
			}
		}
	}
	
	immediate = {
		FROM = {
			set_offmap_flag = seros_had_unrest
			set_status = seros_unrest # Players will be notified by SE.50030
		}
	}
}

# Status changes to 'Merrow Invasion'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50140

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
			OR = {
				NOT = { has_offmap_flag = seros_invaded_player_dynasty }
				had_offmap_tmp_flag = { flag = seros_invaded_player_dynasty years = 200 }
			}
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # Unrest increases the chance of an invasion
			factor = 3
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 2 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 4 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 6 }
			}
		}
		modifier = { # Famines last for at least 4 years
			factor = 0
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_famine years = 4 }
				}
			}
		}
		modifier = { # Plagues last for at least 2 years
			factor = 0
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_plague years = 2 }
				}
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 6 }
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 3 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 8 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 5 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 10 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 7 }
			}
		}
		modifier = {
			factor = 0
			FROM = {
				offmap_ruler = {
					culture = merrow
				}
			}
		}
		modifier = {
			factor = 0.3
			NOT = { 
				has_global_flag = merrow_empire_arrival
			}
		}
		modifier = {
			factor = 0.5
			FROM = { has_status = seros_golden_age }
		}
		modifier = {
			factor = 0.5
			FROM = { has_offmap_flag = seros_merrow_won_1 }
		}
		modifier = {
			factor = 0.25
			FROM = { has_offmap_flag = seros_merrow_won_2 }
		}
		modifier = {
			factor = 0.1
			FROM = { has_offmap_flag = seros_merrow_won_3 }
		}
	}
	
	immediate = {
		FROM = {
			set_offmap_flag = no_status_news
			set_status = seros_merrow_invasion
			set_offmap_flag = seros_merrow_invasion
			clr_offmap_flag = no_status_news
		}
		any_player = {
			limit = {
				has_offmap_news_enabled = FROM
				is_within_diplo_range = ROOT
			}
			narrative_event = { id = SE.50141 }
		}
	}
}

# News from seros: Merrow Invasion
narrative_event = {
	id = SE.50141
	title = NEWS_FROM_seros
	picture = GFX_evt_mongols
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	desc = {
		trigger = {
			FROMFROM = {
				OR = {
					prev_status = seros_famine
					prev_status = seros_unrest
					prev_status = seros_plague
				}
			}
		}
		text = EVTDESC_SE_50141_BOOST
	}
	desc = {
		trigger = {
			FROMFROM = {
				prev_status = seros_golden_age
			}
		}
		text = EVTDESC_SE_50141_PENALTY
	}
	desc = {
		trigger = {
			FROMFROM = {
				NOR = {
					prev_status = seros_famine
					prev_status = seros_unrest
					prev_status = seros_plague
					prev_status = seros_golden_age
				}
			}
		}
		text = EVTDESC_SE_50031_merrow # Can be the same as the standard status change notification
	}

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	
	option = {
		name = EVTOPT_SE_50141
	}
}

# Chance for an end to the 'Merrow Invasion' Status
# Hidden. Fired from on_offmap_yearly_pulse
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50160

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			has_status = seros_merrow_invasion
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_merrow_invasion years = 2 } }
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_merrow_invasion years = 4 } }
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_merrow_invasion years = 8 } }
		}
		modifier = {
			factor = 5
			FROM = { had_offmap_tmp_flag = { flag = seros_merrow_invasion years = 10 } }
		}
	}
	
	immediate = {
		random_list = {
			100 = { # seros won!
				modifier = {
					factor = 3
					FROM = {
						prev_status = seros_golden_age
					}
				}
				
				FROM = {
					set_offmap_flag = no_status_news
					set_status = seros_stable
					clr_offmap_flag = no_status_news
					
					if = {
						limit = { has_offmap_flag = seros_badly_beaten_1 }
						clr_offmap_flag = seros_badly_beaten_1
					}
					if = {
						limit = { has_offmap_flag = seros_badly_beaten_2 }
						clr_offmap_flag = seros_badly_beaten_2
						set_offmap_flag = seros_badly_beaten_1
					}
					if = {
						limit = { has_offmap_flag = seros_badly_beaten_3 }
						clr_offmap_flag = seros_badly_beaten_3
						set_offmap_flag = seros_badly_beaten_2
					}
				}
				
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50161 }
				}
			}
			100 = { # Tuigan won!
				modifier = {
					factor = 3
					FROM = {
						OR = {
							prev_status = seros_unrest
							prev_status = seros_famine
							prev_status = seros_plague
						}
					}
				}
				
				FROM = {
					set_offmap_flag = no_status_news
					set_status = seros_unrest
					set_offmap_flag = seros_had_unrest
					clr_offmap_flag = no_status_news
				
					set_offmap_flag = seros_expansionist_trend # Likely for the new ruler to pick Expansionist policy
					clr_offmap_flag = seros_badly_beaten_3
					clr_offmap_flag = seros_badly_beaten_2
					clr_offmap_flag = seros_badly_beaten_1
					
					if = {
						limit = {
							has_offmap_flag = seros_merrow_won_2
						}
						set_offmap_flag = seros_merrow_won_3
						clr_offmap_flag = seros_merrow_won_2
					}
					
					if = {
						limit = {
							has_offmap_flag = seros_merrow_won_1
						}
						set_offmap_flag = seros_merrow_won_2
						clr_offmap_flag = seros_merrow_won_1
					}
					
					if = {
						limit = {
							NOR = {
								has_offmap_flag = seros_merrow_won_1
								has_offmap_flag = seros_merrow_won_2
								has_offmap_flag = seros_merrow_won_3
							}
						}
						set_offmap_flag = seros_merrow_won_1
					}
					
					set_offmap_flag = no_succession_news
				}
				
				# A new ruler ascends to the Dragon Throne. The fallout is handled by SE.10005 and SE.50000 (from 'on_offmap_ruler_changed')
				random_list = {
					100 = {
						modifier = {
							factor = 2
							year = 1200
						}
						if = { # If no Borjigins, business as usual
							random_list = {
								0 = {
									additive_modifier = {
										value = 50
										has_game_rule = {
											name = gender
											value = all
										}
									}
									create_character = {
										age = 35
										random_traits = yes
										female = yes
										religion = vaprak # A bit strange, but necessary
										culture = merrow
										dynasty = actually_culture
										trait = brilliant_strategist
										martial = 10
									}
								}
								50 = {
									create_character = {
										age = 35
										random_traits = yes
										female = no
										religion = vaprak # A bit strange, but necessary
										culture = merrow
										dynasty = actually_culture
										trait = brilliant_strategist
										martial = 10
									}
								}
							}
							new_character = {
								create_character = {
									age = 60
									random_traits = yes
									female = no
									religion = THIS
									culture = THIS
									dynasty = THIS
								}
								new_character = {
									death = { death_reason = death_in_seros_historic }
									save_event_target_as = new_seros_ruler_father
								}
								set_father = event_target:new_seros_ruler_father
								FROM = {
									set_offmap_holder = PREV
								}
								random_list = {
									100 = {
									
									}
									10 = {
										religion = vaprak
									}
									10 = {
										religion = giant_pantheon
									}
									5 = {
										religion = karontor
									}
									5 = {
										religion = ulutiuan
									}
								}
							}
						}
					}
					35 = {
						modifier = {
							factor = 3
							NOT = { year = 1200 }
						}
						modifier = {
							factor = 0
							event_target:merrow_seros_invader = {
								is_alive = yes
							}
						}
						random_list = {
							0 = {
								additive_modifier = {
									value = 50
									has_game_rule = {
										name = gender
										value = all
									}
								}
								create_character = {
									age = 35
									random_traits = yes
									female = yes
									religion = vaprak # A bit strange, but necessary
									culture = merrow
									dynasty = actually_culture
									trait = brilliant_strategist
									martial = 10
								}
							}
							50 = {
								create_character = {
									age = 35
									random_traits = yes
									female = no
									religion = vaprak # A bit strange, but necessary
									culture = merrow
									dynasty = actually_culture
									trait = brilliant_strategist
									martial = 10
								}
							}
						}
						new_character = {
							create_character = {
								age = 60
								random_traits = yes
								female = no
								religion = THIS
								culture = THIS
								dynasty = THIS
							}
							new_character = {
								death = { death_reason = death_in_seros_historic }
								save_event_target_as = new_seros_ruler_father
							}
							set_father = event_target:new_seros_ruler_father
							FROM = {
								set_offmap_holder = PREV
							}
							random_list = {
								100 = {
								
								}
								10 = {
									religion = vaprak
								}
								10 = {
									religion = giant_pantheon
								}
								5 = {
									religion = karontor
								}
								5 = {
									religion = ulutiuan
								}
							}
						}
					}
					25 = {
						modifier = {
							factor = 0
							event_target:merrow_seros_invader = {
								is_alive = yes
							}
						}
						random_list = {
							0 = {
								additive_modifier = {
									value = 50
									has_game_rule = {
										name = gender
										value = all
									}
								}
								create_character = {
									age = 35
									random_traits = yes
									female = yes
									religion = vaprak # A bit strange, but necessary
									culture = merrow
									dynasty = actually_culture
									trait = brilliant_strategist
									martial = 10
								}
							}
							50 = {
								create_character = {
									age = 35
									random_traits = yes
									female = no
									religion = vaprak # A bit strange, but necessary
									culture = merrow
									dynasty = actually_culture
									trait = brilliant_strategist
									martial = 10
								}
							}
						}
						new_character = {
							create_character = {
								age = 60
								random_traits = yes
								female = no
								religion = THIS
								culture = THIS
								dynasty = THIS
							}
							new_character = {
								death = { death_reason = death_in_seros_historic }
								save_event_target_as = new_seros_ruler_father
							}
							set_father = event_target:new_seros_ruler_father
							FROM = {
								set_offmap_holder = PREV
							}
							random_list = {
								100 = {
								
								}
								10 = {
									religion = vaprak
								}
								10 = {
									religion = giant_pantheon
								}
								5 = {
									religion = karontor
								}
								5 = {
									religion = ulutiuan
								}
							}
						}
					}
					25 = {
						modifier = {
							factor = 0
							event_target:merrow_seros_invader = {
								is_alive = yes
							}
						}
						random_list = {
							0 = {
								additive_modifier = {
									value = 50
									has_game_rule = {
										name = gender
										value = all
									}
								}
								create_character = {
									age = 35
									random_traits = yes
									female = yes
									religion = vaprak # A bit strange, but necessary
									culture = merrow
									dynasty = actually_culture
									trait = brilliant_strategist
									martial = 10
								}
							}
							50 = {
								create_character = {
									age = 35
									random_traits = yes
									female = no
									religion = vaprak # A bit strange, but necessary
									culture = merrow
									dynasty = actually_culture
									trait = brilliant_strategist
									martial = 10
								}
							}
						}
						new_character = {
							create_character = {
								age = 60
								random_traits = yes
								female = no
								religion = THIS
								culture = THIS
								dynasty = THIS
							}
							new_character = {
								death = { death_reason = death_in_seros_historic }
								save_event_target_as = new_seros_ruler_father
							}
							set_father = event_target:new_seros_ruler_father
							FROM = {
								set_offmap_holder = PREV
							}
							random_list = {
								100 = {
								
								}
								10 = {
									religion = vaprak
								}
								10 = {
									religion = giant_pantheon
								}
								5 = {
									religion = karontor
								}
								5 = {
									religion = ulutiuan
								}
							}
						}
					}
				}
				
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50162 }
				}

				random_list = {
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id = SE.10113 days = 15 } #Spawns a Displaced Prince adventurer...
						set_character_flag = spawning_a_displaced_royal
						log = "seros Logging:"
						log = "Attempting to spawn a Displaced Prince, as aftermath to event SE.50160 (end of Being Invaded by sahuagins). Character should spawn in 15 days."
					}
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id =  SE.10109 days = 15 } #Spawns a tuigan tribe leader...
						set_character_flag = spawning_a_merrow_invader
						log = "seros Logging:"
						log = "Attempting to spawn a merrow Invader, as aftermath to event SE.50160 (end of Being Invaded by sahuagins). Character should spawn in 15 days."
					}
				}
			}
		}
	}
}

# News from seros: sahuagin Invasion Fails
narrative_event = {
	id = SE.50161
	title = NEWS_FROM_seros
	picture = GFX_evt_china_mongols_invade
	portrait = seros
	desc = EVTDESC_SE_50161
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	
	option = {
		name = EVTOPT_SE_50161
	}
}

# News from seros: sahuagin Invasion Succeeds
narrative_event = {
	id = SE.50162
	title = NEWS_FROM_seros
	picture = GFX_evt_tengri_throneroom_oldgods
	portrait = seros
	desc = EVTDESC_SE_50162
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	
	option = {
		trigger = {
			NOT = { has_character_modifier = peace_deal_with_seros }
		}
		name = EVTOPT_SE_50162
	}
	
	option = {
		trigger = {
			has_character_modifier = peace_deal_with_seros
		}
		name = EVTOPT_SE_50302_BROKEN_PEACE_DEAL
		
		remove_character_modifier = peace_deal_with_seros
	}
}

# Status changes to 'Sahuagin Invasion'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50180

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
			OR = {
				NOT = { has_offmap_flag = seros_invaded_player_dynasty }
				had_offmap_tmp_flag = { flag = seros_invaded_player_dynasty years = 200 }
			}
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # Unrest increases the chance of an invasion
			factor = 3
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 2 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 4 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				had_offmap_tmp_flag = { flag = seros_had_unrest years = 6 }
			}
		}
		modifier = { # Famines last for at least 4 years
			factor = 0
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_famine years = 2 }
				}
			}
		}
		modifier = { # Plagues last for at least 2 years
			factor = 0
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_plague years = 2 }
				}
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 6 }
			}
		}
		modifier = {
			factor = 1.25
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 3 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 8 }
			}
		}
		modifier = {
			factor = 1.5
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 5 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_famine
				has_offmap_flag = seros_had_famine
				had_offmap_tmp_flag = { flag = seros_had_famine years = 10 }
			}
		}
		modifier = {
			factor = 2
			FROM = {
				has_status = seros_plague
				has_offmap_flag = seros_had_plague
				had_offmap_tmp_flag = { flag = seros_had_plague years = 7 }
			}
		}
		modifier = {
			factor = 0
			FROM = {
				offmap_ruler = {
					culture = sahuagin
				}
			}
		}
		modifier = {
			factor = 0.5
			FROM = { has_status = seros_golden_age }
		}
		modifier = {
			factor = 0.5
			FROM = { has_offmap_flag = seros_sahuagin_won_1 }
		}
		modifier = {
			factor = 0.25
			FROM = { has_offmap_flag = seros_sahuagin_won_2 }
		}
		modifier = {
			factor = 0.1
			FROM = { has_offmap_flag = seros_sahuagin_won_3 }
		}
	}
	
	immediate = {
		FROM = {
			set_offmap_flag = no_status_news
			set_status = seros_sahuagin_invasion
			set_offmap_flag = seros_sahuagin_invasion
			clr_offmap_flag = no_status_news
		}
		any_player = {
			limit = {
				has_offmap_news_enabled = FROM
				is_within_diplo_range = ROOT
			}
			narrative_event = { id = SE.50181 }
		}
	}
}

# News from seros: Sahuagin Invasion
narrative_event = {
	id = SE.50181
	title = NEWS_FROM_seros
	picture = GFX_evt_china_mongols_invade
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	desc = {
		trigger = {
			FROMFROM = {
				OR = {
					prev_status = seros_famine
					prev_status = seros_unrest
					prev_status = seros_plague
				}
			}
		}
		text = EVTDESC_SE_50181_BOOST
	}
	desc = {
		trigger = {
			FROMFROM = {
				prev_status = seros_golden_age
			}
		}
		text = EVTDESC_SE_50181_PENALTY
	}
	desc = {
		trigger = {
			FROMFROM = {
				NOR = {
					prev_status = seros_famine
					prev_status = seros_unrest
					prev_status = seros_plague
					prev_status = seros_golden_age
				}
			}
		}
		text = EVTDESC_SE_50031_sahuagin # Can be the same as the standard status change notification
	}

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		name = EVTOPT_SE_50141
	}
}

# Chance for an end to the 'Sahuagin Invasion' Status
# Hidden. Fired from on_offmap_yearly_pulse
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50200

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			has_status = seros_sahuagin_invasion
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_sahuagin_invasion years = 2 } }
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_sahuagin_invasion years = 4 } }
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_sahuagin_invasion years = 8 } }
		}
		modifier = {
			factor = 5
			FROM = { had_offmap_tmp_flag = { flag = seros_sahuagin_invasion years = 10 } }
		}
	}
	
	immediate = {
		random_list = {
			100 = { # seros won!
				#trigger = { always = no }
				modifier = {
					factor = 3
					FROM = {
						prev_status = seros_golden_age
					}
				}
				
				FROM = {
					set_offmap_flag = no_status_news
					set_status = seros_stable
					clr_offmap_flag = no_status_news
					
					if = {
						limit = { has_offmap_flag = seros_badly_beaten_1 }
						clr_offmap_flag = seros_badly_beaten_1
					}
					if = {
						limit = { has_offmap_flag = seros_badly_beaten_2 }
						clr_offmap_flag = seros_badly_beaten_2
						set_offmap_flag = seros_badly_beaten_1
					}
					if = {
						limit = { has_offmap_flag = seros_badly_beaten_3 }
						clr_offmap_flag = seros_badly_beaten_3
						set_offmap_flag = seros_badly_beaten_2
					}
				}
				
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50201 }
				}
			}
			100 = { # Sahuagin won!
				modifier = {
					factor = 3
					FROM = {
						OR = {
							prev_status = seros_unrest
							prev_status = seros_famine
							prev_status = seros_plague
						}
					}
				}
				
				FROM = {
					set_offmap_flag = no_status_news
					set_status = seros_unrest
					set_offmap_flag = seros_had_unrest
					clr_offmap_flag = no_status_news
				
					clr_offmap_flag = seros_badly_beaten_3
					clr_offmap_flag = seros_badly_beaten_2
					clr_offmap_flag = seros_badly_beaten_1
					
					if = {
						limit = {
							has_offmap_flag = seros_sahuagin_won_2
						}
						set_offmap_flag = seros_sahuagin_won_3
						clr_offmap_flag = seros_sahuagin_won_2
					}
					
					if = {
						limit = {
							has_offmap_flag = seros_sahuagin_won_1
						}
						set_offmap_flag = seros_sahuagin_won_2
						clr_offmap_flag = seros_sahuagin_won_1
					}
					
					if = {
						limit = {
							NOR = {
								has_offmap_flag = seros_sahuagin_won_1
								has_offmap_flag = seros_sahuagin_won_2
								has_offmap_flag = seros_sahuagin_won_3
							}
						}
						set_offmap_flag = seros_sahuagin_won_1
					}
					
					set_offmap_flag = no_succession_news
				}
				
				# A new ruler ascends to the Dragon Throne. The fallout is handled by SE.10005 and SE.50000 (from 'on_offmap_ruler_changed')
				create_character = { #The father
					age = 60
					random_traits = yes
					female = no
					religion = THIS
					culture = shou
					dynasty = THIS
				}
				new_character = {
					PREV = { set_father = PREV }
					death = { death_reason = death_in_seros_historic }
				}
				random_list = {
					0 = {
						additive_modifier = {
							value = 50
							has_game_rule = {
								name = gender
								value = all
							}
						}
						create_character = {
							age = 30
							random_traits = yes
							female = yes
							religion = infernal # A bit strange, but necessary
							culture = sahuagin
							dynasty = actually_culture
							trait = brilliant_strategist
							martial = 10
						}
					}
					50 = {
						create_character = {
							age = 30
							random_traits = yes
							female = no
							religion = infernal # A bit strange, but necessary
							culture = sahuagin
							dynasty = actually_culture
							trait = brilliant_strategist
							martial = 10
						}
					}
				}
				new_character = {
					create_character = {
						age = 60
						random_traits = yes
						female = no
						religion = THIS
						culture = THIS
						dynasty = THIS
					}
					new_character = {
						death = { death_reason = death_in_seros_historic }
						save_event_target_as = new_seros_ruler_father
					}
					set_father = event_target:new_seros_ruler_father
					FROM = {
						set_offmap_holder = PREV
					}
					random_list = {
						100 = {
								
						}
						10 = {
							religion = scale_cult
						}
						10 = {
							religion = infernal
						}
						5 = {
							religion = abyssal_cult
						}
						5 = {
							religion = dead_three
						}
					}
				}
  			
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50202 }
				}
				
				random_list = {
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id = SE.10113 days = 15 } #Spawns a Displaced Prince adventurer...
						set_character_flag = spawning_a_displaced_royal
						log = "seros Logging:"
						log = "Attempting to spawn a Displaced Prince, as aftermath to event SE.50200 (end of Being Invaded by merrow). Character should spawn in 15 days."
					}
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id =  SE.10109 days = 15 } #Spawns a tuigan tribe leader...
						set_character_flag = spawning_a_sahuagin_invader
						log = "seros Logging:"
						log = "Attempting to spawn a Sahuagin Invader, as aftermath to event SE.50200 (end of Being Invaded by sahuagins). Character should spawn in 15 days."
					}
				}
			}
		}
	}
}

# News from seros: Sahuagin Invasion Fails
narrative_event = {
	id = SE.50201
	title = NEWS_FROM_seros
	picture = GFX_evt_china_mongols_invade
	portrait = seros
	desc = EVTDESC_SE_50201
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		name = EVTOPT_SE_50201
	}
}

# News from seros: Sahuagin Invasion Succeeds
narrative_event = {
	id = SE.50202
	title = NEWS_FROM_seros
	picture = GFX_evt_tengri_throneroom_oldgods
	portrait = seros
	desc = EVTDESC_SE_50202
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		trigger = {
			NOT = { has_character_modifier = peace_deal_with_seros }
		}
		name = EVTOPT_SE_50202
	}
	
	option = {
		trigger = {
			has_character_modifier = peace_deal_with_seros
		}
		name = EVTOPT_SE_50302_BROKEN_PEACE_DEAL
		
		remove_character_modifier = peace_deal_with_seros
	}
}

# Status changes to 'Great Famine'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50220

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_famine
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # Famines don't tend to happen too close to each other
			factor = 0
			FROM = {
				has_offmap_flag = seros_had_famine
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_famine years = 90 }
				}
			}
		}
		modifier = { # Golden Ages tend to not end with a Famine or Plague
			factor = 0
			FROM = {
				has_status = seros_golden_age
				has_offmap_flag = seros_had_golden_age
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_golden_age years = 50 }
				}
			}
		}
		modifier = { # Slightly less likely to get unrest if things are fine
			factor = 0.75
			FROM = {
				OR = {
					has_status = seros_stable
					has_status = seros_golden_age
				}
			}
		}
	}
    
	immediate = {
		FROM = {
			set_offmap_flag = seros_had_famine
			set_status = seros_famine # Players will be notified by SE.50030
		}
	}
}

# Status changes to 'Devastating Plague'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50240

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_plague
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # Famines don't tend to happen too close to each other
			factor = 0
			FROM = {
				has_offmap_flag = seros_had_plague
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_plague years = 90 }
				}
			}
		}
		modifier = { # Golden Ages tend to not end with a Famine or Plague
			factor = 0
			FROM = {
				has_status = seros_golden_age
				has_offmap_flag = seros_had_golden_age
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_golden_age years = 50 }
				}
			}
		}
		modifier = { # Slightly less likely to get unrest if things are fine
			factor = 0.75
			FROM = {
				OR = {
					has_status = seros_stable
					has_status = seros_golden_age
				}
			}
		}
	}
    
	immediate = {
		FROM = {
			set_offmap_flag = seros_had_plague
			set_status = seros_plague # Players will be notified by SE.50030
		}
	}
}

# Status changes to 'Golden Age'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50260

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			has_status = seros_stable
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # seros tend to not enter Golden Ages frequently
			factor = 0
			FROM = {
				has_offmap_flag = seros_had_golden_age
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_golden_age years = 200 }
				}
			}
		}
		modifier = { # But they tend to have one at least every 250 years
			factor = 2
			FROM = {
				has_offmap_flag = seros_had_golden_age
				had_offmap_tmp_flag = { flag = seros_had_golden_age years = 250 }
			}
		}
	}

	immediate = {
		FROM = {
			set_offmap_flag = seros_had_golden_age
			set_status = seros_golden_age # Players will be notified by SE.50030
		}
	}
}

# Status changes to 'Civil War'
# Hidden. Fired from on_offmap_yearly_pulse.
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50280

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			NOR = {
				has_status = seros_merrow_invasion # Resolution handled by SE.50160
				has_status = seros_sahuagin_invasion # Resolution handled by SE.50200
				has_status = seros_civil_war # Resolution handled by SE.50300
			}
			OR = {
				NOT = { has_offmap_flag = seros_invaded_player_dynasty }
				had_offmap_tmp_flag = { flag = seros_invaded_player_dynasty years = 200 }
			}
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = { # Unrest last for at least 2 years before becoming Stable/Civil War
			factor = 0
			FROM = {
				has_status = seros_unrest
				has_offmap_flag = seros_had_unrest
				NOT = {
					had_offmap_tmp_flag = { flag = seros_had_unrest years = 2 }
				}
			}
		}
		modifier = {
			factor = 0.01
			FROM = { has_status = seros_golden_age }
		}
		modifier = {
			factor = 0.1
			FROM = { has_status = seros_stable }
		}
		modifier = {
			factor = 0.1
			FROM = { NOT = { has_status = seros_unrest } }
		}
	}
	
	immediate = {
		FROM = {
			set_offmap_flag = no_status_news
			set_status = seros_civil_war
			set_offmap_flag = seros_civil_war
			clr_offmap_flag = no_status_news
		}
		any_player = {
			limit = {
				has_offmap_news_enabled = FROM
				is_within_diplo_range = ROOT
			}
			narrative_event = { id = SE.50281 }
		}
	}
}

# News from seros: Civil War
narrative_event = {
	id = SE.50281
	title = NEWS_FROM_seros
	picture = GFX_evt_china_civil_war
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	desc = {
		trigger = {
			FROMFROM = {
				prev_status = seros_unrest
			}
		}
		text = EVTDESC_SE_50281_UNREST
	}
	desc = {
		trigger = {
			FROMFROM = {
				NOT = { prev_status = seros_unrest }
			}
		}
		text = EVTDESC_SE_50031_CW # Can use the default description
	}

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		name = EVTOPT_SE_50281
	}
}

# Chance for an end to the 'Civil War' Status
# Hidden. Fired from on_offmap_yearly_pulse
# Root = Governor
# From = Offmap
character_event = {
	id = SE.50300

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = {
			is_offmap_tag = seros
			has_status = seros_civil_war
		}
	}
	
	weight_multiplier = {
		factor = 1
		modifier = {
			factor = 0
			FROM = {
				NOT = {
					had_offmap_tmp_flag = { flag = seros_civil_war years = 2 }
				}
			}
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_civil_war years = 3 } }
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_civil_war years = 5 } }
		}
		modifier = {
			factor = 2
			FROM = { had_offmap_tmp_flag = { flag = seros_civil_war years = 8 } }
		}
		modifier = {
			factor = 5
			FROM = { had_offmap_tmp_flag = { flag = seros_civil_war years = 10 } }
		}
	}
	
	immediate = {
		clr_offmap_flag = seros_civil_war
		random_list = {
			70 = { # The loyalists won!
				FROM = {
					set_offmap_flag = no_status_news
					set_status = seros_stable
					clr_offmap_flag = no_status_news
				}
				
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50301 }
				}
				random_list = {
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id =  SE.10109 days = 15 } #Spawns a tuigan tribe leader...
						set_character_flag = spawning_a_sahuagin_invader
						log = "seros Logging:"
						log = "Attempting to spawn a Sahuagin Invader, as aftermath to event SE.50300 (end of Civil War - the loyalists won). Character should spawn in 15 days."
					}
					50 = {
						trigger = {
							OR = {
								NOT = { has_global_flag = rebel_general_invasion_success }
								had_global_flag = { flag = rebel_general_invasion_success days = 54750 }
							}
						}
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id = SE.60200 days = 15 } #Spawns a Rebel General
						set_character_flag = spawning_a_rebel_general
						log = "seros Logging:"
						log = "Attempting to spawn a Rebel General, as aftermath to event SE.50300 (end of Civil War - the loyalists won). Character should spawn in 15 days."
					}
				}
			}
			100 = { # The rebels won - new Dynasty!
				modifier = {
					factor = 2.5
					FROM = {
						holder_scope = {
							NOT = { culture_group = fish_group } # A foreign dynasty is more likely to be ousted
						}
					}
				}
				
				FROM = {
					set_offmap_flag = no_status_news
					random_list = {
						50 = { set_status = seros_stable }
						50 = { set_status = seros_unrest set_offmap_flag = seros_had_unrest }
					}
					clr_offmap_flag = no_status_news
					
					set_offmap_flag = no_succession_news
					
					if = {
						limit = {
							holder_scope = {
								NOT = { culture_group = fish_group }
							}
						}
						set_offmap_flag = foreign_dynasty_ousted
					}
				}
				
				# A new ruler ascends to the Dragon Throne. The fallout is handled by SE.10005 and SE.50000 (from 'on_offmap_ruler_changed')
				random_list = {
					0 = {
						additive_modifier = {
							value = 50
							has_game_rule = {
								name = gender
								value = all
							}
						}
						create_character = {
							age = 30
							random_traits = yes
							female = yes
							religion = vaprak # A bit strange, but necessary
							culture = merrow
							dynasty = actually_culture
							trait = brilliant_strategist
							martial = 10
						}
					}
					50 = {
						create_character = {
							age = 30
							random_traits = yes
							female = no
							religion = vaprak # A bit strange, but necessary
							culture = merrow
							dynasty = actually_culture
							trait = brilliant_strategist
							martial = 10
						}
					}
				}
				new_character = {
					create_character = {
						age = 60
						random_traits = yes
						female = no
						religion = THIS
						culture = THIS
						dynasty = THIS
					}
					new_character = {
						death = { death_reason = death_in_seros_historic }
						save_event_target_as = new_seros_ruler_father
					}
					set_father = event_target:new_seros_ruler_father
					FROM = {
						set_offmap_holder = PREV
					}
				}
  			
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50302 }
				}
				
				FROM = { clr_offmap_flag = foreign_dynasty_ousted }

				random_list = {
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id = SE.10113 days = 15 } #Spawns a Displaced Prince adventurer...
						set_character_flag = spawning_a_displaced_royal
						log = "seros Logging:"
						log = "Attempting to spawn a Displaced Prince, as aftermath to event SE.50300 (end of Civil War - the rebels won). Character should spawn in 15 days."
					}
					50 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id = SE.10109 days = 15 } #Spawns a tuigan tribe leader...
						set_character_flag = spawning_a_merrow_invader
						log = "seros Logging:"
						log = "Attempting to spawn a merrow Invader, as aftermath to event SE.50300 (end of Civil War - the rebels won). Character should spawn in 15 days."
					}
				}
			}
			70 = { # The rebels won - old Dynasty pretender
				modifier = {
					factor = 0.5
					FROM = {
						holder_scope = {
							NOT = { culture_group = fish_group }
						}
					}
				}
				
				FROM = {
					set_offmap_flag = no_status_news
					set_status = seros_stable
					clr_offmap_flag = no_status_news
					
					set_offmap_flag = no_succession_news
					holder_scope = {
						death = {
							death_reason = death_offmap
						}
					}
				}
				
				any_player = {
					limit = {
						has_offmap_news_enabled = FROM
						is_within_diplo_range = ROOT
					}
					narrative_event = { id = SE.50303 days = 1 }
				}
				random_list = {
					90 = {
						modifier = {
							factor = 0
							has_game_rule = {
								name = seros_invasions
								value = none
							}
						}
						character_event = { id =  SE.10109 days = 15 } #Spawns a tuigan tribe leader...
						set_character_flag = spawning_a_sahuagin_invader
						log = "seros Logging:"
						log = "Attempting to spawn a Sahuagin Invader, as aftermath to event SE.50300 (end of Civil War - the rebels won (old dynasty pretender)). Character should spawn in 15 days."
					}
					10 = {
						#nothing happens...
					}
				}
			}
		}
	}
}

# News from seros: Civil War Ends - Loyalists Win!
narrative_event = {
	id = SE.50301
	title = NEWS_FROM_seros
	picture = GFX_evt_china_civil_war
	portrait = seros
	desc = EVTDESC_SE_50301
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		name = EVTOPT_SE_50301
	}
}

# News from seros: Civil War Ends - Rebels Win, New Dynasty!
narrative_event = {
	id = SE.50302
	title = NEWS_FROM_seros
	picture = GFX_evt_china_civil_war
	portrait = seros
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	desc = {
		trigger = {
			FROMFROM = {
				has_offmap_flag = foreign_dynasty_ousted
			}
		}
		text = EVTDESC_SE_50302_HAN_DYNASTY
	}
	desc = {
		trigger = {
			FROMFROM = {
				NOT = { has_offmap_flag = foreign_dynasty_ousted }
			}
		}
		text = EVTDESC_SE_50302_NEW_DYNASTY
	}

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	hide_new = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		trigger = {
			NOT = { has_character_modifier = peace_deal_with_seros }
		}
		name = EVTOPT_SE_50301
	}
	
	option = {
		trigger = {
			has_character_modifier = peace_deal_with_seros
		}
		name = EVTOPT_SE_50302_BROKEN_PEACE_DEAL
		
		remove_character_modifier = peace_deal_with_seros
	}
}

# News from seros: Civil War Ends - Rebels Win but Old Dynasty stays in power
narrative_event = {
	id = SE.50303
	title = NEWS_FROM_seros
	picture = GFX_evt_china_civil_war
	portrait = seros
	desc = EVTDESC_SE_50303
	window = EventWindowOffmap
	background = GFX_event_window_news_from_china

	has_dlc = "Jade Dragon"
	
	is_triggered_only = yes
	
	immediate = {
		seros = {
			ruler = {
				save_event_target_as = portrait_target
			}
		}
	}
	
	portrait = event_target:portrait_target
	
	option = {
		name = EVTOPT_SE_50301
	}
}

character_event = { # Update Silk Road values
	id = SE.50400

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes

	trigger = { FROM = { is_offmap_tag = seros } }
	
	immediate = {
		FROM = {
			if = {
				limit = {
					has_status = seros_golden_age
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 2
				}
			}
			if = {
				limit = {
					has_status = seros_unrest
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.75
				}
			}
			if = {
				limit = {
					OR = {
						has_status = seros_civil_war
						has_status = seros_merrow_invasion
						has_status = seros_sahuagin_invasion
					}
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.5
				}
			}
			if = {
				limit = {
					has_status = seros_famine
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.25
				}
			}
			if = {
				limit = {
					has_status = seros_plague
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.1
				}
			}
			if = {
				limit = {
					has_policy = seros_isolationist
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0
				}
			}
			if = {
				limit = {
					NOR = {
						has_policy = seros_isolationist
						has_status = seros_famine
						has_status = seros_plague
						has_status = seros_unrest
						has_status = seros_civil_war
						has_status = seros_merrow_invasion
						has_status = seros_sahuagin_invasion
						has_status = seros_golden_age
					}
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 1
				}
			}
		}
	}
}

character_event = { # Update Silk Road values on startup
	id = SE.50401

	has_dlc = "Jade Dragon"

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_multiplayer_host_character = yes
		is_save_game = no
	}
	
	immediate = {
		seros = {
			if = {
				limit = {
					has_status = seros_golden_age
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 2
				}
			}
			if = {
				limit = {
					has_status = seros_unrest
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.75
				}
			}
			if = {
				limit = {
					OR = {
						has_status = seros_civil_war
						has_status = seros_merrow_invasion
						has_status = seros_sahuagin_invasion
					}
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.5
				}
			}
			if = {
				limit = {
					has_status = seros_famine
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.25
				}
			}
			if = {
				limit = {
					has_status = seros_plague
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0.1
				}
			}
			if = {
				limit = {
					has_policy = seros_isolationist
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 0
				}
			}
			if = {
				limit = {
					NOR = {
						has_policy = seros_isolationist
						has_status = seros_famine
						has_status = seros_plague
						has_status = seros_unrest
						has_status = seros_civil_war
						has_status = seros_merrow_invasion
						has_status = seros_sahuagin_invasion
						has_status = seros_golden_age
					}
				}
				set_trade_route_value_multiplier = {
					which = sea_fallen_stars_route
					value = 1
				}
			}
		}
	}
}

character_event = {
	id = SE.30500
	
	hide_window = yes
	is_triggered_only = yes

	trigger = { FROM = { is_offmap_tag = seros } }
	
	immediate = {
		change_variable = {
			which = global_temp_status_years
			value = 1
		}
		change_variable = {
			which = global_temp_policy_years
			value = 1
		}
	}
}

character_event = {
	id = SE.30501
	
	hide_window = yes
	is_triggered_only = yes

	trigger = { FROM = { is_offmap_tag = seros } }
	
	immediate = {
		FROM = {
			print_seros_policy_update_effect = yes
		}
	}
}

character_event = {
	id = SE.30502
	
	hide_window = yes
	is_triggered_only = yes

	trigger = { FROM = { is_offmap_tag = seros } }
	
	immediate = {
		FROM = {
			print_seros_status_update_effect = yes
		}
	}
}

character_event =  {
	id = SE.30503
	
	hide_window = yes
	is_triggered_only = yes

	trigger = { FROMFROM = { is_offmap_tag = seros } }
	
	immediate = {
		print_seros_ruler_update_effect = yes
	}
}

character_event =  { # Clean up living members of the seros dynasty
	id = SE.30504
	
	hide_window = yes
	is_triggered_only = yes
	
	only_playable = yes

	trigger = { 
		is_offmap_governor = yes
		is_save_game = no
	}
	
	immediate = {
		seros = {
			offmap_ruler = {
				any_dynasty_member = {
					limit = {
						NOR = {
							is_offmap_ruler = yes
							is_ruler = yes
						}
					}
					death = { death_reason = death_went_back_to_seros }
				}
			}
			offmap_prev_ruler = {
				any_dynasty_member = {
					limit = {
						NOR = {
							is_offmap_ruler = yes
							is_ruler = yes
						}
					}
					death = { death_reason = death_went_back_to_seros }
				}
			}
		}
	}
}